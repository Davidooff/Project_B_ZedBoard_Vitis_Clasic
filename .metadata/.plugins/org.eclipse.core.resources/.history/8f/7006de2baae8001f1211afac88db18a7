/*
    Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
    Copyright (c) 2012 - 2022 Xilinx, Inc. All Rights Reserved.
	SPDX-License-Identifier: MIT


    http://www.FreeRTOS.org
    http://aws.amazon.com/freertos


    1 tab == 4 spaces!
*/

/* FreeRTOS includes. */
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "timers.h"
/* Xilinx includes. */
#include "xil_printf.h"
#include "xparameters.h"

// #include "xuartps.h"

#include "TemperatureData.h"
#include "UartImp.h"
 #include "SDCard.h"

#define DELAY_100_MS    	100UL
#define DELAY_10_SECONDS	10000UL
#define DELAY_1_SECOND		1000UL



TaskHandle_t xRxTask; // Gen data
TaskHandle_t xTxTask;	// send data to xSendUart if task is blocked creating task with xSendUart

TaskHandle_t xSaveSdTask;
TaskHandle_t xSandUartTask;
//volatile
struct xTransmitStruct {
	TaskHandle_t& xSaveSdTask = xSaveSdTask;
	TaskHandle_t& xSandUartTask = xSandUartTask;
	TemperatureSample* temperatureData;
	int* temperatureCount;
} xTransmitProps;

void xAddNewTemp(void *pvParameters) {
	for(;;){
		TemperatureData* temperatureData = static_cast<TemperatureData*>(pvParameters);
		static int temp_count = 0;
		if (temperatureData) {
			temperatureData->addTemperatureData(temp_count); // Invoke member function
			temp_count++;
		}
		vTaskDelay(pdMS_TO_TICKS(DELAY_1_SECOND));
	}
}
void xSaveSD(void *pvParameters) {
	static SDCard SD(100);
	TemperatureData* temperatureData = static_cast<TemperatureData*>(pvParameters);
	int complit = SD.write((char* )"asd.txt", (TemperatureSample* )temperatureData->data);
	xil_printf("Data written code: %d", complit);
}

void xTransmitAllTemp(void *pvParameters) {
	static TaskStatus_t xTaskDetails;
	xTransmitStruct* transmitData = static_cast<xTransmitStruct*>(pvParameters);
//	while (1) {
//		if (*transmitData->temperatureCount == QUEUE_SIZE) {
	xTaskCreate( xSaveSD, "SaveSDTask", 4000, &temperatureData, tskIDLE_PRIORITY, &xSaveSdTask );
	vTaskDelay(pdMS_TO_TICKS(DELAY_10_SECOND));
	xTaskDetails = vTaskGetInfo(
            xHandle,
            &xTaskDetails,
            pdTRUE,
            eValid );
}


void xSendUart(void *pvParameters) {
//	static UartImp UartClass();
//	TemperatureData* temperatureData = static_cast<TemperatureData*>(pvParameters);
//	UartClass.send(temperatureData->data, temperatureData->count);
}

int main() {
	xil_printf("START");
	TemperatureData temperatureData;
	xTransmitProps.temperatureData = temperatureData.data;
	xTransmitProps.temperatureCount = &temperatureData.count;
	xTaskCreate(xAddNewTemp, "xAddNewTemp", 400, &temperatureData, tskIDLE_PRIORITY, &xRxTask);
	xTaskCreate(xTransmitAllTemp, "xShowAllTemp", 800, &xTransmitProps, tskIDLE_PRIORITY + 1, &xTxTask);
	vTaskStartScheduler();
}
