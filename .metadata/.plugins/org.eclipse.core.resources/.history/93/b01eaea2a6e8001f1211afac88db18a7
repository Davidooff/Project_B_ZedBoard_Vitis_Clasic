//#include "xuartps.h"
//#include "UartClass.h"
//#include "TemperatureData.h"
//#include "xil_printf.h"
//#include "sleep.h"
// #include "xparameters.h"
//#include "time.h"


//Uart::Uart(u16 device_id){
	// int Status;

	// Config = XUartPs_LookupConfig(device_id);
	// if(!Config) {
	// 	xil_printf("UART config is undefined");
	// }

	// Status = XUartPs_CfgInitialize(&Uart_PS, Config, Config->BaseAddress);
	// XUartPs_SetBaudRate(&Uart_PS, 1200);
	// if(Status == XST_SUCCESS){
	// 	xil_printf("UART seted up");
	// } else {
	// 	xil_printf("!Error while setting up UART!");
	// }
//}

// void Uart::u32_to_u8_4( u32 value, u8 array[4] )
// {
//   array[0] = value >> 24;
//   array[1] = value >> 16;
//   array[2] = value >>  8;
//   array[3] = value >>  0;
// }


// void Uart::send(TemperatureSample *TemperatureSample, int size){
// 	static u8 start_of_data[4] = {1,1,1,1};
// 	static u8 u32_in_u8[4];
// 	for(int i = 0; i < size; i++){
// 		xil_printf("Starting package sending %d\r\n", TemperatureSample[i].temperature);
// 		u32_to_u8_4(TemperatureSample[i].timestamp, u32_in_u8);


// 		XUartPs_Send(&Uart_PS, start_of_data, 4);
// 		Uart::whileUntilSend();
// 		usleep(50);

// 		XUartPs_Send(&Uart_PS, (u8*) TemperatureSample[i].temperature, 1);
// 		Uart::whileUntilSend();
// 		usleep(50);

// 		XUartPs_Send(&Uart_PS, u32_in_u8, 4);
// 		Uart::whileUntilSend();
// 		usleep(100);
// 	}
// }

// void Uart::whileUntilSend() {
// 	while (XUartPs_IsSending(&Uart_PS)){ xil_printf("Processing it...\r\n"); }
// }

//Array<char, 5> Uart::ConvertSampleToBytes(TemperatureSample *data){
//	char myBytes[5];
//	myBytes[2] = '0';
//	myBytes[0] = (data->temperature >> 8);
//	myBytes[1] = data->temperature;
//	myBytes[3] = (data->timestamp >> 8);
//	myBytes[4] = data->timestamp;
//	return myBytes;
//}

