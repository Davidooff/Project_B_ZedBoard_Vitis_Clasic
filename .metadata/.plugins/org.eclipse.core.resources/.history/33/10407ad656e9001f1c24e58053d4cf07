#include "xuartps.h"
#include "UartImp.h"
#include "TemperatureData.h"
#include "xil_printf.h"
#include "sleep.h"
#include <stdexcept>

UartImp::UartImp(u8 uart_id){
    int Status;

	Config = XUartPs_LookupConfig(uart_id);
	if(Config == NULL) {
		xil_printf("UART config is null \r\n");
        throw std::runtime_error("Uart config is null!");
	}

	Status = XUartPs_CfgInitialize(&Uart_PS, Config, Config->BaseAddress);
	XUartPs_SetBaudRate(&Uart_PS, 1200);
	if(Status == XST_SUCCESS){
		xil_printf("UART seted up \r\n");
	} else {
		xil_printf("!Error while setting up UART! \r\n");
        throw std::runtime_error("!Error while setting up UART!");
	}
}

void UartImp::u32_to_u8_4( u32 value, u8 array[4] )
{
  array[0] = value >> 24;
  array[1] = value >> 16;
  array[2] = value >>  8;
  array[3] = value >>  0;
}


int UartImp::send(TemperatureSample *TemperatureSample, int size){
	static u8 start_of_data[4] = {1,1,1,1};
	static u8 u32_in_u8[4];
	static u8 answer_buffer[1] = {1};
	for(int i = 0; i < size; i++){
		xil_printf("Starting package sending %d\r\n", TemperatureSample[i].temperature);
		u32_to_u8_4(TemperatureSample[i].timestamp, u32_in_u8);


		XUartPs_Send(&Uart_PS, start_of_data, 4);
		UartImp::whileUntilSend();
		usleep(50);

		XUartPs_Send(&Uart_PS, (u8*) TemperatureSample[i].temperature, 1);
		UartImp::whileUntilSend();
		usleep(50);

		XUartPs_Send(&Uart_PS, u32_in_u8, sizeof (u32_in_u8) / 4);
		UartImp::whileUntilSend();
		usleep(100);

//		answer_byte = XUartPs_RecvByte 	( 	Config->BaseAddress	); //Blocking thread

		XUartPs_Recv(&Uart_PS, answer_buffer, 1);
		if (answer_buffer[0] != 0) {
			xil_printf("Answer byte: %d \r\n", answer_buffer[0]);
			return (int) answer_buffer[0];
		}
	}
	return 0;
}

void UartImp::whileUntilSend() {
	while (XUartPs_IsSending(&Uart_PS)){ xil_printf("Processing it...\r\n"); }
}


